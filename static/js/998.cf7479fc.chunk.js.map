{"version":3,"file":"static/js/998.cf7479fc.chunk.js","mappings":"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","sources":["../node_modules/src/observe.ts","components/Home/Home.jsx"],"sourcesContent":["import type { ObserverInstanceCallback } from './index';\n\nconst observerMap = new Map<\n  string,\n  {\n    id: string;\n    observer: IntersectionObserver;\n    elements: Map<Element, Array<ObserverInstanceCallback>>;\n  }\n>();\n\nconst RootIds: WeakMap<Element | Document, string> = new WeakMap();\nlet rootId = 0;\n\nlet unsupportedValue: boolean | undefined = undefined;\n\n/**\n * What should be the default behavior if the IntersectionObserver is unsupported?\n * Ideally the polyfill has been loaded, you can have the following happen:\n * - `undefined`: Throw an error\n * - `true` or `false`: Set the `inView` value to this regardless of intersection state\n * **/\nexport function defaultFallbackInView(inView: boolean | undefined) {\n  unsupportedValue = inView;\n}\n\n/**\n * Generate a unique ID for the root element\n * @param root\n */\nfunction getRootId(root: IntersectionObserverInit['root']) {\n  if (!root) return '0';\n  if (RootIds.has(root)) return RootIds.get(root);\n  rootId += 1;\n  RootIds.set(root, rootId.toString());\n  return RootIds.get(root);\n}\n\n/**\n * Convert the options to a string Id, based on the values.\n * Ensures we can reuse the same observer when observing elements with the same options.\n * @param options\n */\nexport function optionsToId(options: IntersectionObserverInit) {\n  return Object.keys(options)\n    .sort()\n    .filter((key) => options[key] !== undefined)\n    .map((key) => {\n      return `${key}_${\n        key === 'root' ? getRootId(options.root) : options[key]\n      }`;\n    })\n    .toString();\n}\n\nfunction createObserver(options: IntersectionObserverInit) {\n  // Create a unique ID for this observer instance, based on the root, root margin and threshold.\n  let id = optionsToId(options);\n  let instance = observerMap.get(id);\n\n  if (!instance) {\n    // Create a map of elements this observer is going to observe. Each element has a list of callbacks that should be triggered, once it comes into view.\n    const elements = new Map<Element, Array<ObserverInstanceCallback>>();\n    let thresholds: number[] | readonly number[];\n\n    const observer = new IntersectionObserver((entries) => {\n      entries.forEach((entry) => {\n        // While it would be nice if you could just look at isIntersecting to determine if the component is inside the viewport, browsers can't agree on how to use it.\n        // -Firefox ignores `threshold` when considering `isIntersecting`, so it will never be false again if `threshold` is > 0\n        const inView =\n          entry.isIntersecting &&\n          thresholds.some((threshold) => entry.intersectionRatio >= threshold);\n\n        // @ts-ignore support IntersectionObserver v2\n        if (options.trackVisibility && typeof entry.isVisible === 'undefined') {\n          // The browser doesn't support Intersection Observer v2, falling back to v1 behavior.\n          // @ts-ignore\n          entry.isVisible = inView;\n        }\n\n        elements.get(entry.target)?.forEach((callback) => {\n          callback(inView, entry);\n        });\n      });\n    }, options);\n\n    // Ensure we have a valid thresholds array. If not, use the threshold from the options\n    thresholds =\n      observer.thresholds ||\n      (Array.isArray(options.threshold)\n        ? options.threshold\n        : [options.threshold || 0]);\n\n    instance = {\n      id,\n      observer,\n      elements,\n    };\n\n    observerMap.set(id, instance);\n  }\n\n  return instance;\n}\n\n/**\n * @param element - DOM Element to observe\n * @param callback - Callback function to trigger when intersection status changes\n * @param options - Intersection Observer options\n * @param fallbackInView - Fallback inView value.\n * @return Function - Cleanup function that should be triggered to unregister the observer\n */\nexport function observe(\n  element: Element,\n  callback: ObserverInstanceCallback,\n  options: IntersectionObserverInit = {},\n  fallbackInView = unsupportedValue,\n) {\n  if (\n    typeof window.IntersectionObserver === 'undefined' &&\n    fallbackInView !== undefined\n  ) {\n    const bounds = element.getBoundingClientRect();\n    callback(fallbackInView, {\n      isIntersecting: fallbackInView,\n      target: element,\n      intersectionRatio:\n        typeof options.threshold === 'number' ? options.threshold : 0,\n      time: 0,\n      boundingClientRect: bounds,\n      intersectionRect: bounds,\n      rootBounds: bounds,\n    });\n    return () => {\n      // Nothing to cleanup\n    };\n  }\n  // An observer with the same options can be reused, so lets use this fact\n  const { id, observer, elements } = createObserver(options);\n\n  // Register the callback listener for this element\n  let callbacks = elements.get(element) || [];\n  if (!elements.has(element)) {\n    elements.set(element, callbacks);\n  }\n\n  callbacks.push(callback);\n  observer.observe(element);\n\n  return function unobserve() {\n    // Remove the callback from the callback list\n    callbacks.splice(callbacks.indexOf(callback), 1);\n\n    if (callbacks.length === 0) {\n      // No more callback exists for element, so destroy it\n      elements.delete(element);\n      observer.unobserve(element);\n    }\n\n    if (elements.size === 0) {\n      // No more elements are being observer by this instance, so destroy it\n      observer.disconnect();\n      observerMap.delete(id);\n    }\n  };\n}\n","import app from '../App.module.css';\nimport { useInView } from 'react-intersection-observer';\n\nconst Home = () => {\n  const { ref, inView } = useInView({\n    threshold: 0,\n  });\n\n  return (\n    <>\n      <div className={app.hero} aria-label=\"hero\">\n        <h2\n          className={\n            !inView ? app.hero__title : `${app.hero__title} ${app.show}`\n          }\n          ref={ref}\n        >\n          Katherine Makhlay<span className={app.hero__sublogo}>makeup artist</span>\n        </h2>\n      </div>\n      <div className={app.container}>\n        {/* components */}\n      </div>\n    </>\n  );\n};\nexport default Home;\n"],"names":["Map","RootIds","WeakMap","rootId","unsupportedValue","undefined","defaultFallbackInView","inView","getRootId","root","has","get","set","sort","filter","key","map","createObserver","id","instance","some","threshold","Object","intersectionRatio","trackVisibility","isVisible","IntersectionObserver","entries","entry","isIntersecting","forEach","target","callback","Array","element","isArray","fallbackInView","window","bounds","getBoundingClientRect","time","boundingClientRect","thresholds","intersectionRect","rootBounds","callbacks","push","observe","unobserve","splice","indexOf","length","delete","size","disconnect","isPlainChildren","props","children","InView","constructor","node","_unobserveCb","handleNode","triggerOnce","setState","keys","initialInView","skip","observeNode","handleChange","onChange","state","componentDidUpdate","prevProps","observerMap","useEffect","current","ref","as","createElement","useState","entryTarget","setRef","React","useInView","className","app"],"sourceRoot":""}